import React, { useEffect, useState } from "react";

const TideHigh = () => {
  return (
    <svg
      aria-hidden={true}
      width="1em"
      viewBox="0 0 24 24"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path
        d="M8.25 10.875C8.44891 10.875 8.63968 10.796 8.78033 10.6553C8.92098 10.5147 9 10.3239 9 10.125V10.5H12H15V10.125C15 10.3239 15.079 10.5147 15.2197 10.6553C15.3603 10.796 15.5511 10.875 15.75 10.875C15.9489 10.875 16.1397 10.796 16.2803 10.6553C16.421 10.5147 16.5 10.3239 16.5 10.125V3C16.5 2.80109 16.421 2.61032 16.2803 2.46967C16.1397 2.32902 15.9489 2.25 15.75 2.25C15.5511 2.25 15.3603 2.32902 15.2197 2.46967C15.079 2.61032 15 2.80109 15 3V4.5H9V3C9 2.80109 8.92098 2.61032 8.78033 2.46967C8.63968 2.32902 8.44891 2.25 8.25 2.25C8.05109 2.25 7.86032 2.32902 7.71967 2.46967C7.57902 2.61032 7.5 2.80109 7.5 3V10.125C7.5 10.3239 7.57902 10.5147 7.71967 10.6553C7.86032 10.796 8.05109 10.875 8.25 10.875ZM9 10.5V9H15V10.5H9ZM15 6V7.5H9V6H15ZM2.25 15.75C2.25 15.5511 2.32902 15.3603 2.46967 15.2197C2.61032 15.079 2.80109 15 3 15C4.35188 15 5.08031 15.4856 5.66625 15.8756C6.1875 16.2244 6.60188 16.5 7.5 16.5C8.39812 16.5 8.8125 16.2244 9.33375 15.8756C9.91875 15.4856 10.6462 15 11.9991 15C13.3519 15 14.0803 15.4856 14.6653 15.8756C15.1884 16.2244 15.6028 16.5 16.5 16.5C17.3972 16.5 17.8125 16.2244 18.3337 15.8756C18.9197 15.4856 19.6463 15 21 15C21.1989 15 21.3897 15.079 21.5303 15.2197C21.671 15.3603 21.75 15.5511 21.75 15.75C21.75 15.9489 21.671 16.1397 21.5303 16.2803C21.3897 16.421 21.1989 16.5 21 16.5C20.1019 16.5 19.6875 16.7756 19.1663 17.1244C18.5803 17.5144 17.8537 18 16.5 18C15.1463 18 14.4187 17.5144 13.8337 17.1244C13.3125 16.7756 12.8972 16.5 12 16.5C11.1028 16.5 10.6875 16.7756 10.1663 17.1244C9.58125 17.5144 8.85375 18 7.50094 18C6.14813 18 5.42062 17.5144 4.83469 17.1244C4.3125 16.7756 3.89812 16.5 3 16.5C2.80109 16.5 2.61032 16.421 2.46967 16.2803C2.32902 16.1397 2.25 15.9489 2.25 15.75ZM21.75 19.5C21.75 19.6989 21.671 19.8897 21.5303 20.0303C21.3897 20.171 21.1989 20.25 21 20.25C20.1019 20.25 19.6875 20.5256 19.1663 20.8744C18.5803 21.2644 17.8537 21.75 16.5 21.75C15.1463 21.75 14.4187 21.2644 13.8337 20.8744C13.3125 20.5256 12.8972 20.25 12 20.25C11.1028 20.25 10.6875 20.5256 10.1663 20.8744C9.58125 21.2644 8.85375 21.75 7.50094 21.75C6.14813 21.75 5.42062 21.2644 4.83469 20.8744C4.3125 20.5256 3.89812 20.25 3 20.25C2.80109 20.25 2.61032 20.171 2.46967 20.0303C2.32902 19.8897 2.25 19.6989 2.25 19.5C2.25 19.3011 2.32902 19.1103 2.46967 18.9697C2.61032 18.829 2.80109 18.75 3 18.75C4.35188 18.75 5.08031 19.2356 5.66625 19.6256C6.1875 19.9744 6.60188 20.25 7.5 20.25C8.39812 20.25 8.8125 19.9744 9.33375 19.6256C9.91875 19.2356 10.6462 18.75 11.9991 18.75C13.3519 18.75 14.0803 19.2356 14.6653 19.6256C15.1884 19.9744 15.6028 20.25 16.5 20.25C17.3972 20.25 17.8125 19.9744 18.3337 19.6256C18.9197 19.2356 19.6463 18.75 21 18.75C21.1989 18.75 21.3897 18.829 21.5303 18.9697C21.671 19.1103 21.75 19.3011 21.75 19.5Z"
        fill="currentColor"
      />
      <path
        d="M2.46967 11.4697C2.32902 11.6103 2.25 11.8011 2.25 12C2.25 12.1989 2.32902 12.3897 2.46967 12.5303C2.61032 12.671 2.80109 12.75 3 12.75C3.89812 12.75 4.3125 13.0256 4.83469 13.3744L4.83741 13.3762C5.42288 13.7659 6.15022 14.25 7.50094 14.25C8.85281 14.25 9.58024 13.765 10.165 13.3752L10.1663 13.3744C10.6875 13.0256 11.1028 12.75 12 12.75C12.8972 12.75 13.3125 13.0256 13.8337 13.3744L13.835 13.3752C14.4198 13.765 15.1472 14.25 16.5 14.25C17.8507 14.25 18.5771 13.7665 19.1623 13.377L19.1663 13.3744C19.6875 13.0256 20.1019 12.75 21 12.75C21.1989 12.75 21.3897 12.671 21.5303 12.5303C21.671 12.3897 21.75 12.1989 21.75 12C21.75 11.8011 21.671 11.6103 21.5303 11.4697C21.3897 11.329 21.1989 11.25 21 11.25C19.6493 11.25 18.9229 11.7335 18.3377 12.123L18.3337 12.1256C17.8125 12.4744 17.3972 12.75 16.5 12.75C15.6028 12.75 15.1884 12.4744 14.6653 12.1256C14.0803 11.7356 13.3519 11.25 11.9991 11.25C10.6472 11.25 9.91976 11.735 9.33496 12.1248L9.33375 12.1256C8.8125 12.4744 8.39813 12.75 7.5 12.75C6.60187 12.75 6.1875 12.4744 5.66625 12.1256L5.66473 12.1246C5.07906 11.7348 4.35071 11.25 3 11.25C2.80109 11.25 2.61032 11.329 2.46967 11.4697Z"
        fill="currentColor"
      />
    </svg>
  );
};

const TideLow = () => {
  return (
    <svg
      aria-hidden={true}
      width="1em"
      viewBox="0 0 24 24"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path
        d="M8.25 14.0053C8.44891 14.0053 8.63968 13.9263 8.78033 13.7856C8.92098 13.645 9 13.4542 9 13.2553V12H15V13.4334C15 13.6323 15.079 13.8231 15.2197 13.9638C15.3603 14.1044 15.5511 14.1834 15.75 14.1834C15.9489 14.1834 16.1397 14.1044 16.2803 13.9638C16.421 13.8231 16.5 13.6323 16.5 13.4334V3C16.5 2.80109 16.421 2.61032 16.2803 2.46967C16.1397 2.32902 15.9489 2.25 15.75 2.25C15.5511 2.25 15.3603 2.32902 15.2197 2.46967C15.079 2.61032 15 2.80109 15 3V4.5H9V3C9 2.80109 8.92098 2.61032 8.78033 2.46967C8.63968 2.32902 8.44891 2.25 8.25 2.25C8.05109 2.25 7.86032 2.32902 7.71967 2.46967C7.57902 2.61032 7.5 2.80109 7.5 3V13.2553C7.5 13.4542 7.57902 13.645 7.71967 13.7856C7.86032 13.9263 8.05109 14.0053 8.25 14.0053ZM9 10.5V9H15V10.5H9ZM15 6V7.5H9V6H15ZM2.25 15.75C2.25 15.5511 2.32902 15.3603 2.46967 15.2197C2.61032 15.079 2.80109 15 3 15C4.35188 15 5.08031 15.4856 5.66625 15.8756C6.1875 16.2244 6.60188 16.5 7.5 16.5C8.39812 16.5 8.8125 16.2244 9.33375 15.8756C9.91875 15.4856 10.6462 15 11.9991 15C13.3519 15 14.0803 15.4856 14.6653 15.8756C15.1884 16.2244 15.6028 16.5 16.5 16.5C17.3972 16.5 17.8125 16.2244 18.3337 15.8756C18.9197 15.4856 19.6463 15 21 15C21.1989 15 21.3897 15.079 21.5303 15.2197C21.671 15.3603 21.75 15.5511 21.75 15.75C21.75 15.9489 21.671 16.1397 21.5303 16.2803C21.3897 16.421 21.1989 16.5 21 16.5C20.1019 16.5 19.6875 16.7756 19.1663 17.1244C18.5803 17.5144 17.8537 18 16.5 18C15.1463 18 14.4187 17.5144 13.8337 17.1244C13.3125 16.7756 12.8972 16.5 12 16.5C11.1028 16.5 10.6875 16.7756 10.1663 17.1244C9.58125 17.5144 8.85375 18 7.50094 18C6.14813 18 5.42062 17.5144 4.83469 17.1244C4.3125 16.7756 3.89812 16.5 3 16.5C2.80109 16.5 2.61032 16.421 2.46967 16.2803C2.32902 16.1397 2.25 15.9489 2.25 15.75ZM21.75 19.5C21.75 19.6989 21.671 19.8897 21.5303 20.0303C21.3897 20.171 21.1989 20.25 21 20.25C20.1019 20.25 19.6875 20.5256 19.1663 20.8744C18.5803 21.2644 17.8537 21.75 16.5 21.75C15.1463 21.75 14.4187 21.2644 13.8337 20.8744C13.3125 20.5256 12.8972 20.25 12 20.25C11.1028 20.25 10.6875 20.5256 10.1663 20.8744C9.58125 21.2644 8.85375 21.75 7.50094 21.75C6.14813 21.75 5.42062 21.2644 4.83469 20.8744C4.3125 20.5256 3.89812 20.25 3 20.25C2.80109 20.25 2.61032 20.171 2.46967 20.0303C2.32902 19.8897 2.25 19.6989 2.25 19.5C2.25 19.3011 2.32902 19.1103 2.46967 18.9697C2.61032 18.829 2.80109 18.75 3 18.75C4.35188 18.75 5.08031 19.2356 5.66625 19.6256C6.1875 19.9744 6.60188 20.25 7.5 20.25C8.39812 20.25 8.8125 19.9744 9.33375 19.6256C9.91875 19.2356 10.6462 18.75 11.9991 18.75C13.3519 18.75 14.0803 19.2356 14.6653 19.6256C15.1884 19.9744 15.6028 20.25 16.5 20.25C17.3972 20.25 17.8125 19.9744 18.3337 19.6256C18.9197 19.2356 19.6463 18.75 21 18.75C21.1989 18.75 21.3897 18.829 21.5303 18.9697C21.671 19.1103 21.75 19.3011 21.75 19.5Z"
        fill="currentColor"
      />
    </svg>
  );
};

export const Spinner = () => {
  return (
    <span className={"spinner"}>
      <svg width="1em" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
        <path
          d="M12,1A11,11,0,1,0,23,12,11,11,0,0,0,12,1Zm0,19a8,8,0,1,1,8-8A8,8,0,0,1,12,20Z"
          opacity=".25"
          fill={"currentColor"}
        />
        <path
          d="M10.14,1.16a11,11,0,0,0-9,8.92A1.59,1.59,0,0,0,2.46,12,1.52,1.52,0,0,0,4.11,10.7a8,8,0,0,1,6.66-6.61A1.42,1.42,0,0,0,12,2.69h0A1.57,1.57,0,0,0,10.14,1.16Z"
          fill={"currentColor"}
        />
      </svg>
    </span>
  );
};

interface TideAndTempBlockProps {
  title?: string;
}

type WaterLevel = {
  value: string;
  time: string;
  flag: string;
};

function formatToMidnight(date: Date) {
  const year = date.getFullYear();
  const month = String(date.getMonth() + 1).padStart(2, "0"); // Months are 0-based
  const day = String(date.getDate()).padStart(2, "0");
  return `${year}-${month}-${day}T00%3A00`;
}

export const TideAndTempBlock = ({ title }: TideAndTempBlockProps) => {
  const [tideData, setTideData] = useState<WaterLevel[]>([]);
  const [location, setLocation] = useState<string>("");
  const [loading, setLoading] = useState<boolean>(true);
  const todayMidnight = new Date();
  todayMidnight.setHours(0, 0, 0, 0);

  const tomorrowMidnight = new Date(todayMidnight);
  tomorrowMidnight.setDate(tomorrowMidnight.getDate() + 1);

  const todayFormatted = formatToMidnight(todayMidnight);
  const tomorrowFormatted = formatToMidnight(tomorrowMidnight);

  useEffect(() => {
    fetch(
      `https://vannstand.kartverket.no/tideapi.php?lat=60.41022&lon=5.15436&fromtime=${todayFormatted}&totime=${tomorrowFormatted}&datatype=tab&refcode=cd&place=&file=&lang=nb&interval=60&dst=1&tzone=&tide_request=locationdata`,
    )
      .then((response) => response.text())
      .then((xmlText) => {
        const parser = new DOMParser();
        const xmlDoc = parser.parseFromString(xmlText, "text/xml");

        const locationEl = xmlDoc.querySelector("location");
        if (locationEl) {
          setLocation(locationEl.getAttribute("name") ?? "Unknown");
        }

        const waterLevels: WaterLevel[] = Array.from(
          xmlDoc.querySelectorAll("waterlevel"),
        ).map((wl) => ({
          value: wl.getAttribute("value") ?? "0",
          time: wl.getAttribute("time") ?? "",
          flag: wl.getAttribute("flag") ?? "",
        }));

        setTideData(waterLevels);
        setLoading(false);
      })
      .catch((error) => {
        console.error("Error fetching or parsing XML:", error);
      });
  }, []);

  return (
    <div className="weather-block">
      {title && <h2 className="weather-block__title">{title}</h2>}
      {loading ? (
        <dl className="weather-block__list">
          <div className="weather-block__item">
            <Spinner />
          </div>
          <div className="weather-block__item">
            <Spinner />
          </div>
          <div className="weather-block__item">
            <Spinner />
          </div>
          <div className="weather-block__item">
            <Spinner />
          </div>
        </dl>
      ) : (
        <dl className="weather-block__list">
          {tideData.map((entry, index) => {
            const time = new Date(entry.time).toTimeString().slice(0, 5);
            return (
              <div key={index} className="weather-block__item">
                <dt>
                  {entry.flag === "high" ? (
                    <>
                      <TideHigh />
                      <span>Flo</span>
                    </>
                  ) : (
                    <>
                      <TideLow />
                      <span>Fjære</span>
                    </>
                  )}
                </dt>
                <dd>{time}</dd>
              </div>
            );
          })}
        </dl>
      )}
      <div className={"weather-block__weather"}>
        <iframe
          src={"https://www.yr.no/nb/innhold/1-92371/card.html"}
          title={"Været i dag"}
        ></iframe>
      </div>
    </div>
  );
};
